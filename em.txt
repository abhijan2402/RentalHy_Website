  const onFinish = async (values) => {
    console.log(values);

    let coords = null;
    if (values.location) {
      coords = await getLatLngFromAddress(values.location);
    }

    console.log(coords);

    // Validate image uploads
    if (!values.hallImages || !values.hallImages.length) {
      toast.error("Please upload at least one hall image.");
      return;
    }
    if (!values.kitchenImages || !values.kitchenImages.length) {
      toast.error("Please upload at least one kitchen image.");
      return;
    }
    if (!values.parkingImages || !values.parkingImages.length) {
      toast.error("Please upload at least one parking image.");
      return;
    }

    if (!values.brideImages || !values.brideImages.length) {
      toast.error("Please upload at least one Bride/Groom Room image.");
      return;
    }

    // Prepare anyOtherPrices to simple array for submission
    const preparedAnyOtherPrices = anyOtherPrices.map(({ name, price }) => ({
      name,
      price,
    }));

    const formData = new FormData();

    Object.entries(values).forEach(([key, value]) => {
      if (Array.isArray(value)) {
        value.forEach((item, index) => {
          if (key === "hallImages") {
            formData.append(
              `hall_images[${index}]`,
              item?.originFileObj ?? item
            );
          } else if (key === "kitchenImages") {
            formData.append(
              `kitchen_images[${index}]`,
              item?.originFileObj ?? item
            );
          } else if (key === "brideImages") {
            formData.append(
              `bride_images[${index}]`,
              item?.originFileObj ?? item
            );
          } else if (key === "parkingImages") {
            formData.append(
              `parking_images[${index}]`,
              item?.originFileObj ?? item
            );
          }
        });
      } else if (
        key === "priceOptions" &&
        typeof value === "object" &&
        value !== null
      ) {
        Object.entries(value).forEach(([optionKey, optionValue]) => {
          if (optionValue !== undefined) {
            formData.append(optionKey, optionValue);
          }
        });
      } else if (value !== null && value !== undefined) {
        formData.append(key, value);
      }
    });

    preparedAnyOtherPrices.forEach((item) => {
      if (item.name && item.price !== undefined) {
        formData.append(`other[${item.name}]`, item.price);
      }
    });

    formData.append("dates", JSON.stringify(values?.unavailableDates || []));

    if (coords) {
      formData.append("lat", coords.lat.toString());
      formData.append("long", coords.lng.toString());
    }

    // Debug: log all FormData values
    for (let pair of formData.entries()) {
      console.log(pair[0] + ": ", pair[1]);
    }

    await addConvention(formData)
      .unwrap()
      .then((response) => {
        toast.success(
          response?.message || "Convention hall created successfully"
        );
        console.log(response);
      })
      .catch((error) => {
        const errMsg =
          error?.data?.message ||
          error?.error ||
          "Failed to add Hall. Please try again.";
        toast.error(errMsg);
      });

    form.resetFields();
    setHallImages([]);
    setKitchenImages([]);
    setParkingImages([]);
    setAnyOtherPrices([]);
    setUnavailableDatesRanges([]);
    onClose();
  };